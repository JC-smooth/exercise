syntax = "proto3";

//import "other.proto";

// 定义proto的包名, 包名可以避免对message类型之间的名字冲突
// 同名的Message可以通过package进行区分
package foo.bar;

// 普通字段
// field = [ "repeated" ] type fieldName "=" fieldNumber [ "[" fieldOptions "]" ] ";"
// repeated允许字段重复，对于Go语言来说，它会编译成数组(slice of type)类型的格式。

// 如果你有一组字段，同时最多允许这一组中的一个字段出现，就可以使用Oneof定义这一组字段
// oneof字段不能同时使用repeated
message OneofMessage {
    oneof test_oneof {
        string name = 4;
        int64 value = 9;
    }
}

// map类型
//map类型需要设置键和值的类型，格式是"map" "<" keyType "," type ">" mapName "=" fieldNumber [ "[" fieldOptions "]"。
message MapMessage {
    map<int64, string> values = 1;
}

// Reserved
// Reserved可以用来指明此message不使用某些字段，也就是忽略这些字段。
// 可以通过字段编号范围或者字段名称指定保留的字段
message AllNormalypes {
    reserved 2, 4 to 6;
    reserved "field14", "field11";
    double field1 = 1;
    // float field2 = 2;
    int32 field3 = 3;
    // int64 field4 = 4;
    // uint32 field5 = 5;
    // uint64 field6 = 6;
    sint32 field7 = 7;
    sint64 field8 = 8;
    fixed32 field9 = 9;
    fixed64 field10 = 10;
    // sfixed32 field11 = 11;
    sfixed64 field12 = 12;
    bool field13 = 13;
    // string field14 = 14;
    bytes field15 = 15;
}

// 枚举类型
// 枚举类型也是常用的一种类型，它限定字段的值只能取某个特定的值，比如星期类型只能取周一到周日七个值。
// 注意枚举类型的定义采用C++ scoping规则，也就是枚举值是枚举类型的兄弟类型，而不是子类型，所以避免在同一个package定义重名的枚举字段。
// 如果设置allow_alias，允许字段编号重复，RUNNING是STARTED的别名。
// 枚举的常量必须是一个32比特的整数，从效率的角度考虑，不推荐采用负数。
// 第一个枚举值必须是0，而且必须定义。
enum EnumAllowingAlias {
    option allow_alias = true;
    UNKNOWN = 0;
    STARTED = 1;
    RUNNING = 1;
}

enum EnumNotAllowingAlias {
    UNKNOWN2 = 0;
    STARTED2 = 1;
}

message SearchRequest {
    string query = 1;
    int32 page_number = 2;
    int32 result_per_page = 3;
    enum Corpus {
        UNIVERSAL = 0;
        WEB = 1;
        IMAGES = 2;
        LOCAL = 3;
        NEWS = 4;
        PRODUCTS = 5;
        VIDEO = 6;
    }
    Corpus corpus = 4;
}

// 使用其它类型
//你也可以使用其它message类型作为字段的类型值。因为前面在介绍字段的类型的时候说了，
//类型可以是消息类型和枚举类型，枚举类型如上所示，而消息类型如下所示
message SearchResponse {
    repeated Result results = 1;
}

message Result {
    string url = 1;
    string title = 2;
    repeated string snippets = 3;
}
// 注： 如果要使用的类型在其它proto文件中定义，你需要使用import把对应的文件引入进来。

// 嵌套类型
// 嵌套类型就是消息类型里面定义了消息类型：
// 如果Result不需要共用，只被SearchResponse使用，可以采用这种定义方式
message SearchResponses {
    message Result {
        string url = 1;
        string title = 2;
        repeated string snippets = 3;
    }
    repeated Result results = 1;
}

// any
// Any字段允许你处理嵌套数据，并不需要它的proto定义。一个Any以bytes呈现序列化的消息，并且包含一个URL作为这个类型的唯一标识和元数据。
// 为了使用Any类型，你需要引入google/protobuf/any.proto。
import "google/protobuf/any.proto";

message ErrorStatus {
    string message = 1;
    repeated google.protobuf.Any details = 2;
}

// 更新消息类型
// 有时候你不得不修改正在使用的proto文件，比如为类型增加一个字段，protobuf支持这种修改而不影响已有的服务，不过你需要遵循一定的规则：
//不要改变已有字段的字段编号
//当你增加一个新的字段的时候，老系统序列化后的数据依然可以被你的新的格式所解析，只不过你需要处理新加字段的缺省值。 老系统也能解析你信息的值，新加字段只不过被丢弃了
//字段也可以被移除，但是建议你Reserved这个字段，避免将来会使用这个字段
//int32, uint32, int64, uint64 和 bool类型都是兼容的
//sint32 和 sint64兼容，但是不和其它整数类型兼容
//string 和 bytes兼容，如果 bytes 是合法的UTF-8 bytes的话
//嵌入类型和bytes兼容，如果bytes包含一个消息的编码版本的话
//fixed32和sfixed32, fixed64和sfixed64
//enum和int32, uint32, int64, uint64格式兼容
//把单一一个值改变成一个新的oneof类型的一个成员是安全和二进制兼容的。把一组字段变成一个新的oneof字段也是安全的，如果你确保这一组字段最多只会设置一个。把一个字段移动到一个已存在的oneof字段是不安全的

// Well-Known类型
// Protobuf提供了github.com/golang/protobuf/ptypes/timestamp.Timestamp和github.com/golang/protobuf/ptypes/duration.Duration两种扩展类型
// 用来表示时间，并提供了和标准库time.Time和 time.Duration的转换函数。

// 你可以在你的proto中需要时间戳和duration的地方使用这两个类型，而不是使用标准库的time.Time和time.Duration
// 因为标注库的类型没有提供protobuf序列化反序列化的功能，你需要额外处理，所以不如直接使用Protobuf提供的对应类型

// 同时，它还是以指针的方式定义字段，这也意味着我们我们可以分别反序列化的时候，可以区分对应字段是否在数据中存在。
